import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
import asyncio
from datetime import datetime, timedelta
from aiogram.filters import StateFilter
from aiogram.types import ContentType
from random import randint


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = ''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    role TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    middle_name TEXT,
                    grade TEXT,
                    username TEXT,
                    project_topic TEXT,
                    password TEXT,
                    curator_id INTEGER,
                    curator_request_status TEXT DEFAULT 'pending')''')
conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    student_id INTEGER,
                    teacher_id INTEGER,
                    task_text TEXT,
                    deadline TEXT,
                    status TEXT,
                    media_id TEXT,
                    media_type TEXT)''')
conn.commit()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Registration(StatesGroup):
    choosing_role = State()
    student_name = State()
    student_class = State()
    student_project_topic = State()
    teacher_name = State()
    teacher_password = State()

class CuratorRequest(StatesGroup):
    teacher_fio = State()
    teacher_password = State()

class TaskAssignment(StatesGroup):
    task_text = State()
    task_deadline = State()

class DeleteAccount(StatesGroup):
    confirm_code = State()


# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
role_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='üßë‚Äçüéì–£—á–µ–Ω–∏–∫', callback_data='role_student')],
        [InlineKeyboardButton(text='üë®‚Äçüè´–£—á–∏—Ç–µ–ª—å', callback_data='role_teacher')]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–∞
curator_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω', callback_data='curator_accept')],
        [InlineKeyboardButton(text='‚ùå–û—Ç–∫–∞–∑', callback_data='curator_decline')]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
students_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_to_students')]
    ]
)

# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Command('start'))
async def start_handler(message: Message, state: FSMContext):
    cursor.execute('SELECT role FROM users WHERE user_id = ?', (message.from_user.id,))
    user = cursor.fetchone()
    if user:
      if user[0]=="–£—á–∏—Ç–µ–ª—å":
        await message.answer(f"‚úñÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user[0]}. üíª*–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/students - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∫—É—Ä–∏—Ä—É–µ—Ç–µ.\n/delete - –£–¥–∞–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.", parse_mode='Markdown'"")
      elif user[0]=="–£—á–µ–Ω–∏–∫":
        await message.answer(f"‚úñÔ∏è–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user[0]}. üíª*–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/curator - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª—é.\n/delete - –£–¥–∞–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.", parse_mode='Markdown'"")
    else:
        await message.answer("üëã–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥–∞—é —Å –≤–µ–¥–µ–Ω–∏–µ–º –ò–ü (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤). \n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=role_inline_keyboard)
        await state.set_state(Registration.choosing_role)
      
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ (110 - 135)
@dp.callback_query(lambda c: c.data == 'role_student')
async def student_role_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úç–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.student_name)

@dp.message(StateFilter(Registration.student_name))
async def student_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üéì–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10–í):")
    await state.set_state(Registration.student_class)

@dp.message(StateFilter(Registration.student_class))
async def student_class_handler(message: Message, state: FSMContext):
    await state.update_data(grade=message.text)
    await message.answer("üîé–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(Registration.student_project_topic)

@dp.message(StateFilter(Registration.student_project_topic))
async def student_project_topic_handler(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name_parts = user_data['name'].split()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, role, first_name, last_name, grade, project_topic) VALUES (?, ?, ?, ?, ?, ?)',
                   (message.from_user.id, '–£—á–µ–Ω–∏–∫', name_parts[0], name_parts[1], user_data['grade'], message.text))
    conn.commit()
    await message.answer("ü•≥–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –£—á–µ–Ω–∏–∫!\nüíª*–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/curator - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª—é.\n/delete - –£–¥–∞–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.", parse_mode='Markdown')
    await state.clear()
  
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —É—á–∏—Ç–µ–ª—è (138 - 158)
@dp.callback_query(lambda c: c.data == 'role_teacher')
async def teacher_role_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úç–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(Registration.teacher_name)

@dp.message(StateFilter(Registration.teacher_name))
async def teacher_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üîê–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    await state.set_state(Registration.teacher_password)

@dp.message(StateFilter(Registration.teacher_password))
async def teacher_password_handler(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name_parts = user_data['name'].split()
    password = message.text
    cursor.execute('INSERT OR IGNORE INTO users (user_id, role, first_name, last_name, middle_name, password, username) VALUES (?, ?, ?, ?, ?, ?, ?)',
               (message.from_user.id, '–£—á–∏—Ç–µ–ª—å', name_parts[1], name_parts[0], name_parts[2], password, message.from_user.username))
    conn.commit()
    await message.answer("ü•≥–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –£—á–∏—Ç–µ–ª—å!\nüíª*–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/students - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∫—É—Ä–∏—Ä—É–µ—Ç–µ.\n/delete - –£–¥–∞–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.", parse_mode='Markdown')
    await state.clear()
  
# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ (161 - 311)
@dp.message(Command('curator'))
async def curator_request(message: Message, state: FSMContext):
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ —É—á–∏—Ç–µ–ª—è:")
    await state.set_state(CuratorRequest.teacher_fio)


@dp.message(StateFilter(CuratorRequest.teacher_fio))
async def curator_fio_handler(message: Message, state: FSMContext):
    await state.update_data(teacher_fio=message.text)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —É—á–∏—Ç–µ–ª—è:")
    await state.set_state(CuratorRequest.teacher_password)


@dp.message(StateFilter(CuratorRequest.teacher_password))
async def curator_password_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    fio = data['teacher_fio'].split()
    password = message.text

    cursor.execute('SELECT user_id FROM users WHERE role=? AND last_name=? AND first_name=? AND middle_name=? AND password=?',
                   ('–£—á–∏—Ç–µ–ª—å', fio[0], fio[1], fio[2], password))
    teacher = cursor.fetchone()

    if teacher:
        teacher_id = teacher[0]

        cursor.execute('SELECT first_name, last_name, grade, project_topic FROM users WHERE user_id=?',
                       (message.from_user.id,))
        student = cursor.fetchone()

        if student:
            student_first_name, student_last_name, student_grade, student_project = student

            cursor.execute('UPDATE users SET curator_id=?, curator_request_status=? WHERE user_id=?',
                           (teacher_id, 'pending', message.from_user.id))
            conn.commit()

            await bot.send_message(
                teacher_id,
                f"üîî *–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ*\n"
                f"*{student_first_name} {student_last_name}* –∏–∑ *{student_grade}* —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –≤—ã –µ–≥–æ –∫—É—Ä–∏—Ä–æ–≤–∞–ª–∏.\n"
                f"üìö –¢–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∞: *{student_project}*",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'curator_accept_{message.from_user.id}')],
                        [InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'curator_decline_{message.from_user.id}')]
                    ]
                ),
                parse_mode='Markdown'
            )

            await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∏—Ç–µ–ª—é.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª—è.")

    await state.clear()



@dp.callback_query(lambda c: c.data.startswith('curator_accept_'))
async def curator_accept_handler(callback: types.CallbackQuery):
    student_id = int(callback.data.split('_')[2])  # ID —É—á–µ–Ω–∏–∫–∞ –∏–∑ callback_data
    teacher_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    cursor.execute('SELECT curator_request_status FROM users WHERE user_id=?', (student_id,))
    status = cursor.fetchone()

    if status and status[0] != 'pending':
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    cursor.execute('UPDATE users SET curator_request_status=? WHERE user_id=?', ('accepted', student_id))
    conn.commit()

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ —É—á–µ–Ω–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
        parse_mode='Markdown'
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cursor.execute('SELECT first_name, last_name FROM users WHERE user_id=?', (student_id,))
    student = cursor.fetchone()

    cursor.execute('SELECT first_name, last_name, middle_name FROM users WHERE user_id=?', (teacher_id,))
    teacher = cursor.fetchone()

    if student and teacher:
        student_name = f"{student[0]} {student[1]}"
        teacher_name = f"{teacher[1]} {teacher[0]} {teacher[2]}"

        # –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        await bot.send_message(
            student_id,
            f"‚úÖ *–í–∞—à –∫—É—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø—Ä–æ—Å!*\n"
            f"üë§ *–ö—É—Ä–∞—Ç–æ—Ä:* {teacher_name}",
            parse_mode='Markdown'
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é
        await callback.answer("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.")


@dp.callback_query(lambda c: c.data.startswith('curator_decline_'))
async def curator_decline_handler(callback: types.CallbackQuery):
    student_id = int(callback.data.split('_')[2])  # ID —É—á–µ–Ω–∏–∫–∞ –∏–∑ callback_data
    teacher_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    cursor.execute('SELECT curator_request_status FROM users WHERE user_id=?', (student_id,))
    status = cursor.fetchone()

    if status and status[0] != 'pending':
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    cursor.execute('UPDATE users SET curator_id=NULL, curator_request_status=? WHERE user_id=?', ('declined', student_id))
    conn.commit()

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        parse_mode='Markdown'
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cursor.execute('SELECT first_name, last_name FROM users WHERE user_id=?', (student_id,))
    student = cursor.fetchone()

    cursor.execute('SELECT first_name, last_name, middle_name FROM users WHERE user_id=?', (teacher_id,))
    teacher = cursor.fetchone()

    if student and teacher:
        student_name = f"{student[0]} {student[1]}"
        teacher_name = f"{teacher[1]} {teacher[0]} {teacher[2]}"

        # –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        await bot.send_message(
            student_id,
            f"‚ùå *–í–∞—à –∫—É—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å.*\n"
            f"üë§ *–ö—É—Ä–∞—Ç–æ—Ä:* {teacher_name}",
            parse_mode='Markdown'
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é
        await callback.answer("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.")


# –ö–æ–º–∞–Ω–¥–∞ /students –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(Command('students'))
async def teacher_students_handler(message: Message):
    cursor.execute('SELECT user_id, first_name, last_name, grade FROM users WHERE curator_id = ?', (message.from_user.id,))
    students = cursor.fetchall()
    if students:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f'{student[1]} {student[2]} ({student[3]})', callback_data=f'student_{student[0]}')] for student in students
        ])
        await message.answer("üë©‚Äçüéì *–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:*", reply_markup=keyboard, parse_mode='Markdown')
    else:
        await message.answer("‚ùå *–£ –≤–∞—Å –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.*", parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
@dp.callback_query(lambda c: c.data.startswith('student_') and not c.data.startswith('student_remove_'))
async def student_info_handler(callback: types.CallbackQuery):
    try:
        student_id = int(callback.data.split('_')[1])  # –¢–µ–ø–µ—Ä—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ ID —É—á–µ–Ω–∏–∫–∞
        cursor.execute('SELECT first_name, last_name, grade, project_topic FROM users WHERE user_id = ?', (student_id,))
        student = cursor.fetchone()
        if student:
            await callback.message.edit_text(
                f"üë§ *–£—á–µ–Ω–∏–∫:* {student[0]} {student[1]}\n"
                f"üè´ *–ö–ª–∞—Å—Å:* {student[2]}\n"
                f"üìö *–¢–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∞:* {student[3]}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text='üìù –ó–∞–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'task_assign_{student_id}')],
                        [InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞', callback_data=f'student_remove_{student_id}')],
                        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_students')]
                    ]
                )
            )
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        print(f"–û—à–∏–±–∫–∞: {e}")

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
@dp.callback_query(lambda c: c.data.startswith('student_remove_'))
async def student_remove_handler(callback: types.CallbackQuery):
    try:
        student_id = int(callback.data.split('_')[2])
        teacher_id = callback.from_user.id

        cursor.execute('SELECT curator_id FROM users WHERE user_id = ?', (student_id,))
        curator = cursor.fetchone()

        if curator and curator[0] == teacher_id:
            cursor.execute('UPDATE users SET curator_id = NULL WHERE user_id = ?', (student_id,))
            conn.commit()

            await callback.message.edit_text(
                "‚úÖ *–£—á–µ–Ω–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.*",
                parse_mode='Markdown'
            )

            await bot.send_message(
                student_id,
                "‚ùå *–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –≤–∞—à–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞.*",
                parse_mode='Markdown'
            )

            await callback.answer("‚úÖ –£—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.")
        else:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.")
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
@dp.callback_query(lambda c: c.data == 'back_to_students')
async def back_to_students_handler(callback: types.CallbackQuery):
    cursor.execute('SELECT user_id, first_name, last_name, grade FROM users WHERE curator_id = ?', (callback.from_user.id,))
    students = cursor.fetchall()
    if students:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f'{student[1]} {student[2]} ({student[3]})', callback_data=f'student_{student[0]}')]
                for student in students
            ]
        )
        await callback.message.edit_text("üë©‚Äçüéì *–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:*", reply_markup=keyboard, parse_mode='Markdown')
    else:
        await callback.message.edit_text("‚ùå *–£ –≤–∞—Å –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.*", parse_mode='Markdown')
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ (404 - 550)
@dp.callback_query(lambda c: c.data.startswith('task_assign_'))
async def task_assign_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID —É—á–µ–Ω–∏–∫–∞
        student_id = int(callback.data.split('_')[2])
        await state.update_data(student_id=student_id)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞:")
        await state.set_state('task_text')
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞.")


@dp.message(StateFilter('task_text'))
async def task_text_handler(message: types.Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 31.12):")
    await state.set_state('task_deadline')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ 
@dp.message(StateFilter('task_deadline'))
async def task_deadline_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    student_id = user_data['student_id']
    task_text = user_data['task_text']
    deadline = message.text  # –í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12)

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç–µ
        current_year = datetime.now().year
        deadline_date = datetime.strptime(f"{deadline}.{current_year}", "%d.%m.%Y")
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–π—á–∞—Å –¥–µ–∫–∞–±—Ä—å, –∞ —É–∫–∞–∑–∞–Ω–æ 01.01)
        if deadline_date < datetime.now():
            deadline_date = deadline_date.replace(year=current_year + 1)
        
        deadline_str = deadline_date.strftime("%Y-%m-%d")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO tasks (student_id, teacher_id, task_text, deadline, status) VALUES (?, ?, ?, ?, ?)',
                       (student_id, message.from_user.id, task_text, deadline_str, 'active'))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫—É
        cursor.execute('SELECT first_name, last_name FROM users WHERE user_id = ?', (student_id,))
        student = cursor.fetchone()
        if student:
            await bot.send_message(
                student_id,
                f"üìö *–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞!*\n\n"
                f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}\n"
                f"üìÖ *–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {deadline_date.strftime('%d.%m.%Y')}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text='‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ', callback_data='task_done')],
                        [InlineKeyboardButton(text='‚ùó –í–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏', callback_data='task_problem')]
                    ]
                )
            )
            await message.answer(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É *{student[0]} {student[1]}*.\n"
                f"üìö *–¢–µ–∫—Å—Ç:* {task_text}\nüìÖ *–°—Ä–æ–∫:* {deadline_date.strftime('%d.%m.%Y')}",
                parse_mode='Markdown'
            )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–∞
        asyncio.create_task(schedule_task_notifications(student_id, message.from_user.id, task_text, deadline_date))

        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12).", parse_mode='Markdown')

async def schedule_task_notifications(student_id, teacher_id, task_text, deadline_date):
    now = datetime.now()
    mid_date = now + (deadline_date - now) / 2
    last_day = deadline_date - timedelta(days=1)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ä–æ–∫–∞
    delay_mid = (mid_date - now).total_seconds()
    cursor.execute('SELECT status FROM tasks WHERE id = ?', (task_id,))
    task_status = cursor.fetchone()
    if task_status and task_status[0] != "done":
      if delay_mid > 0:
          await asyncio.sleep(delay_mid)
          await bot.send_message(
              student_id,
              f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª–æ–≤–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
              f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}\n"
              f"üìÖ *–î–µ–¥–ª–∞–π–Ω:* {deadline_date.strftime('%d.%m.%Y')}",
              parse_mode='Markdown'
          )

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    cursor.execute('SELECT status FROM tasks WHERE id = ?', (task_id,))
    task_status = cursor.fetchone()
    if task_status and task_status[0] != "done":
      delay_last = (last_day - datetime.now()).total_seconds()
      if delay_last > 0:
          await asyncio.sleep(delay_last)
          await bot.send_message(
              student_id,
              f"‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* –ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.\n\n"
              f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}\n"
              f"üìÖ *–î–µ–¥–ª–∞–π–Ω:* {deadline_date.strftime('%d.%m.%Y')}",
              parse_mode='Markdown'
          )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞
    delay_deadline = (deadline_date - datetime.now()).total_seconds()
    if delay_deadline > 0:
        await asyncio.sleep(delay_deadline)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è
    cursor.execute('SELECT status FROM tasks WHERE id = ?', (task_id,))
    task_status = cursor.fetchone()
    
    if task_status and task_status[0] != 'done':
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        cursor.execute('UPDATE tasks SET status = ? WHERE id = ?', ('missed', task_id))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        await bot.send_message(
            student_id,
            f"‚ùå *–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ —Å—Ä–æ–∫.*\n\n"
            f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}\n"
            f"üìÖ *–î–µ–¥–ª–∞–π–Ω –±—ã–ª:* {deadline_date.strftime('%d.%m.%Y')}",
            parse_mode='Markdown'
        )

        cursor.execute('SELECT first_name, last_name, username FROM users WHERE user_id = ?', (student_id,))
        student = cursor.fetchone()
        student_username = f"@{student[2]}" if student[2] else "–Ω–µ —É–∫–∞–∑–∞–Ω"

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é
        await bot.send_message(
            teacher_id,
            f"‚ùå *–£—á–µ–Ω–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –≤ —Å—Ä–æ–∫!*\n\n"
            f"üë§ *–£—á–µ–Ω–∏–∫:* {student[0]} {student[1]} ({student_username})\n"
            f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}\n"
            f"üìÖ *–î–µ–¥–ª–∞–π–Ω –±—ã–ª:* {deadline_date.strftime('%d.%m.%Y')}",
            parse_mode='Markdown'
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —É—á–µ–Ω–∏–∫–∞ (553 - 689)
@dp.callback_query(lambda c: c.data == 'task_done')
async def task_done_handler(callback: types.CallbackQuery):
    student_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º teacher_id
    cursor.execute('SELECT id, task_text FROM tasks WHERE student_id = ? AND status = ?', 
                  (student_id, 'active'))
    task = cursor.fetchone()
    
    if task:
        task_id, task_text = task
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        cursor.execute('UPDATE tasks SET status = ? WHERE id = ?', ('done', task_id))
        conn.commit()
        
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        cursor.execute('SELECT curator_id FROM users WHERE user_id = ?', (student_id,))
        curator = cursor.fetchone()
        if curator:
            cursor.execute('SELECT first_name, last_name, username FROM users WHERE user_id = ?', (student_id,))
            student = cursor.fetchone()
            student_username = f"@{student[2]}" if student[2] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            
            await bot.send_message(
                curator[0],
                f"‚úÖ *–£—á–µ–Ω–∏–∫ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!*\n"
                f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}\n"
                f"üë§ *–£—á–µ–Ω–∏–∫:* {student[0]} {student[1]} ({student_username})",
                parse_mode='Markdown'
            )
        
        await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.answer("‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
    else:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

# –í–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π —É —É—á–µ–Ω–∏–∫–∞
@dp.callback_query(lambda c: c.data == 'task_problem')
async def task_problem_handler(callback: types.CallbackQuery):
    student_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    cursor.execute('SELECT id, task_text FROM tasks WHERE student_id = ? AND status = ?', (student_id, 'active'))
    task = cursor.fetchone()
    
    if task:
        task_id, task_text = task
      
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        cursor.execute('UPDATE tasks SET status = ? WHERE id = ?', ('problem', task_id))
        conn.commit()

        cursor.execute('SELECT first_name, last_name, username FROM users WHERE user_id = ?', (student_id,))
        student = cursor.fetchone()
        student_username = student[2]
        
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        cursor.execute('SELECT curator_id FROM users WHERE user_id = ?', (student_id,))
        curator = cursor.fetchone()
        if curator:
            await bot.send_message(
                curator[0],
                f"‚ùó *–£—á–µ–Ω–∏–∫ —Å–æ–æ–±—â–∏–ª –æ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.*\n"
                f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}\n"
                f"üë§ *–£—á–µ–Ω–∏–∫:* {student[0]} {student[1]} (@{student_username})",
                parse_mode='Markdown'
            )
        cursor.execute('SELECT u.username FROM users u WHERE u.user_id = ?', (curator[0],))
        teacher_username = cursor.fetchone()[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        await callback.message.edit_reply_markup()
        await callback.message.answer(
            f"‚úâÔ∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–∞—à–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º: @{teacher_username}\n"
            "–û–ø–∏—à–∏—Ç–µ –µ–º—É –≤—Å–µ –≤–æ–∑–Ω–∏–∫—à–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.")
    else:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

@dp.callback_query(lambda c: c.data == 'task_upload')
async def task_upload_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
    await state.set_state("waiting_for_task_media")

@dp.message(StateFilter("waiting_for_task_media"))
async def task_media_handler(message: Message, state: FSMContext):
    if not (message.photo or message.video):
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")
        return

    student_id = message.from_user.id
    media_id = message.photo[-1].file_id if message.photo else message.video.file_id
    media_type = "photo" if message.photo else "video"

    cursor.execute('SELECT task_text FROM tasks WHERE student_id = ? AND status = ?', (student_id, 'active'))
    task = cursor.fetchone()

    cursor.execute('SELECT first_name, last_name, grade FROM users WHERE user_id = ?', (student_id,))
    student = cursor.fetchone()
    
    if task and student:
        task_text = task[0]
        first_name, last_name, grade = student

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute("PRAGMA table_info(tasks)")
        columns = [col[1] for col in cursor.fetchall()]
        if "media_id" not in columns:
            cursor.execute('ALTER TABLE tasks ADD COLUMN media_id TEXT')
        if "media_type" not in columns:
            cursor.execute('ALTER TABLE tasks ADD COLUMN media_type TEXT')

        cursor.execute('UPDATE tasks SET status = ?, media_id = ?, media_type = ? WHERE student_id = ?',
                       ('done', media_id, media_type, student_id))
        conn.commit()
        
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
        cursor.execute('SELECT curator_id FROM users WHERE user_id = ?', (student_id,))
        curator = cursor.fetchone()
        if curator:
            teacher_id = curator[0]
            caption = (
                f"‚úÖ *–£—á–µ–Ω–∏–∫ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!*\n\n"
                f"üë§ *–ò–º—è:* {first_name} {last_name}\n"
                f"üè´ *–ö–ª–∞—Å—Å:* {grade}\n"
                f"üìù *–ó–∞–¥–∞–Ω–∏–µ:* {task_text}"
            )
            if media_type == "photo":
                await bot.send_photo(teacher_id, media_id, caption=caption, parse_mode='Markdown')
            else:
                await bot.send_video(teacher_id, media_id, caption=caption, parse_mode='Markdown')
        
        await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é.")
        await state.clear()
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message(Command('delete'))
async def delete_account_command(message: Message, state: FSMContext):
    code = randint(1000, 9999)
    await state.update_data(confirm_code=code)
    await message.answer(
        f"‚ö†Ô∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: `{code}`\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode='Markdown'
    )
    await state.set_state(DeleteAccount.confirm_code)

@dp.message(StateFilter(DeleteAccount.confirm_code))
async def confirm_delete_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        if int(message.text) == data['confirm_code']:
            user_id = message.from_user.id
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
            cursor.execute('DELETE FROM curator_requests WHERE student_id = ? OR teacher_id = ?', (user_id, user_id))
            cursor.execute('DELETE FROM tasks WHERE student_id = ? OR teacher_id = ?', (user_id, user_id))
            conn.commit()
            
            await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await state.clear()



if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
